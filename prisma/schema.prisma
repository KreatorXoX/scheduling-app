// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?       @unique
  role                 Role          @default(USER)
  hashedPassword       String?
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  appointments         Appointment[] @relation("UserToAppointment")
  employeeAppointments Appointment[] @relation("EmployeeToAppointment")
}

model Appointment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  employeeId String?  @db.ObjectId
  isApproved Boolean  @default(false)
  date       DateTime
  user       User     @relation(fields: [userId], references: [id], name: "UserToAppointment", onDelete: Cascade)
  employee   User?    @relation(fields: [employeeId], references: [id], name: "EmployeeToAppointment", onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}
